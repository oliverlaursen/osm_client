// AzimuthalProjection.compute

#pragma kernel CSMain

// Define the structure of input data (latitude and longitude)
struct NodeData {
    float latitude;
    float longitude;
    uint id;
};

// Define the structure for output data (projected x and y coordinates)
struct ProjectedData {
    float x;
    float y;
    uint id;
};

// Input and output buffers
RWStructuredBuffer<NodeData> nodesInput; // Read-Write buffer for input
RWStructuredBuffer<ProjectedData> resultOutput; // Read-Write buffer for output

// Center point for projection in radians
float centerLatitude;
float centerLongitude;

// Constants
static const float PI = 3.14159265359;
static const float DEG_TO_RAD = PI / 180.0;
static const float EARTH_RADIUS = 6371000; // Earth's radius in meters


// Helper function to convert degrees to radians
float DegreesToRadians(float degrees) {
    return degrees * (PI / 180.0);
}

// Main compute shader function
[numthreads(64, 1, 1)] // Defines the number of threads per thread group
void CSMain (uint3 id : SV_DispatchThreadID) {
    if (id.x >= nodesInput.Length) return; // Boundary check

    NodeData node = nodesInput[id.x];

   // Keep calculations in degrees as much as possible
   float deltaLon = node.longitude - centerLongitude;

   // Convert only when necessary for trigonometric operations
   float latRad = node.latitude * DEG_TO_RAD;
   float centerLatRad = centerLatitude * DEG_TO_RAD;
   float deltaLonRad = deltaLon * DEG_TO_RAD;

   // Trigonometric calculations still need radians
   float centralAngle = acos(sin(centerLatRad) * sin(latRad) +
                             cos(centerLatRad) * cos(latRad) * cos(deltaLonRad));

   float distance = EARTH_RADIUS * centralAngle;

   // Calculate azimuth in radians for trig functions
   float azimuth = atan2(sin(deltaLonRad), cos(centerLatRad) * tan(latRad) -
                         sin(centerLatRad) * cos(deltaLonRad));

   // Convert polar coordinates to Cartesian
   float x = distance * sin(azimuth);
   float y = distance * cos(azimuth);

    ProjectedData result;
    result.x = x;
    result.y = y;
    result.id = node.id; // Assign the ID, ensuring 'node' struct has an 'id' field
    resultOutput[id.x] = result;
}